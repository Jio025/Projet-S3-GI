<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ca.usherbrooke.fgen.api.mapper.MessageMapper">

    <select id="select" resultType="ca.usherbrooke.fgen.api.business.Message">
        select id,
               trimester_id,
               profile_id,
               unit,
               description,
               inscription,
               cip,
               inscriptor
        from app.message
        where (trimester_id,
               profile_id,
               unit,
               id) =
              (coalesce(#{trimesterId}, trimester_id),
               coalesce(#{profileId}, profile_id),
               coalesce(#{unit}, unit),
               coalesce(#{id}, id))
    </select>

    <select id="selectOne" resultType="ca.usherbrooke.fgen.api.business.Message">
        select id,
               trimester_id,
               profile_id,
               unit,
               description,
               inscription,
               cip,
               inscriptor
        from app.message
        where id = #{id}
    </select>


    <select id="allMessages" resultType="ca.usherbrooke.fgen.api.business.Message">
        select id,
               trimester_id,
               profile_id,
               unit,
               description,
               inscription,
               cip,
               inscriptor
        from app.message
        order by inscription desc;

    </select>

    <delete id="deleteOne">
        delete
        from app.message
        where id = #{id}
    </delete>

    <select id="getNewId" resultType="Integer">
        select nextval('app.message_seq'::regclass)
    </select>

    <insert id="insertMessage">
        insert into app.message(id,
                                       trimester_id,
                                       profile_id,
                                       unit,
                                       description,
                                       cip,
                                       inscriptor)
        values (#{message.id},
                #{message.trimesterId},
                #{message.profileId},
                #{message.unit},
                #{message.description},
                #{message.cip},
                #{message.inscriptor})
        on conflict (id) do update set description = excluded.description;
    </insert>

    <!--TODO: changer cette methode -->
    <select id="choose" resultType="Integer">
        select id from app.message where id = #{id}
    </select>

    <!--TODO: valider ceci -->
    <insert id="ajouterDockerfile">
        insert into theseus.dockerfiles(
                    ID_Dockerfile,
                    PATH,
                    Hash,
                    tag_id,
                    Description
        )
        values (
                    #{dockerfile.ID_Dockerfile},
                    #{dockerfile.PATH},
                    #{dockerfile.Hash},
                    #{dockerfile.tag_id},
                    #{dockerfile.Description}
               )
            on conflict (ID_Dockerfile) do nothing;
    </insert>

</mapper>
